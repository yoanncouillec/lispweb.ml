(load "lib/list.scm")
(load "lib/stdout.scm")
(load "lib/assert.scm")

(list
 (assert (length (list)) 0)
 (assert (length (list 1 2 3)) 3)
 (assert (index-of 'x' (list 2 2 2 2 2 'x' 2 2 2)) 5)
 (catch not-found (index-of 'x' (list 2 2 2 2 2 'x' 2 2 2)))
 (catch not-found (index-of 1 (list 2 2 2)))
 (assert (first-slice 3 (list 1 2 3 4 5)) (list 1 2))
 (assert (split-into-2 3 (list 1 2 3 4 5)) (list (list 1 2) (list 4 5)))
 (assert (split 3 (list 1 2 3 4 5 2 6 7 8 9 3 1 2 3 4 5)) (list (list 1 2) (list 4 5 2 6 7 8 9) (list 1 2) (list 4 5)))
 (assert (trim-left 0 (list 0 0 0 1 1 1 0 0 0)) (list 1 1 1 0 0 0))
 (assert (append (list 1 2 3) (list 4 5 6)) (list 1 2 3 4 5 6))
 (assert (reverse (list 1 2 3 4 5)) (list 5 4 3 2 1))
 (assert (trim-right 0 (list 0 0 0 1 1 1 0 0 0)) (list 0 0 0 1 1 1))
 (assert (trim 0 (list 0 0 0 1 1 1 0 0 0)) (list 1 1 1))
 (assert (car (list 1 2 3)) 1)
 (assert (cdr (list 1 2 3)) (list 2 3))
 (assert (car (cdr (cdr (list "html" (list) "child")))) "child")
 (assert (is-begin-of? (list 1 2 3) (list 1 2 3 4)) #t)
 (assert (is-begin-of? (list 1 2 3) (list 1 2)) #f)
 (assert (is-begin-of? (list 1 2 3) (list 1 2 3)) #t)
 (assert (is-begin-of? (list 1 2 3) (list)) #f)
 (assert (drop (list 1 2 3 4 5) 2) (list 3 4 5))
 (assert (drop (list 1 2 3 4 5) 0) (list 1 2 3 4 5))
 (assert (drop (list 1 2 3 4 5) 5) (list))
 (assert
  (split-into-two (list 2 3) (list 1 2 3 4 5))
  (list (list 1) (list 4 5)))
 (assert
  (split-into-two (list 1 2) (list 1 2 3 4 5))
  (list (list) (list 3 4 5)))
 (assert
  (split-into-two (list 4 5) (list 1 2 3 4 5))
  (list (list 1 2 3) (list)))
 (assert
  (split-into-two (list 9 9 9) (list 1 2 3 4 5))
  (list (list 1 2 3 4 5) (list)))
 (assert
  (replace-first (list 1 2 3 4 5) (list 2 3) (list 9 9 9 9 9))
  (list 1 9 9 9 9 9 4 5))
 (assert
  (replace-first (list 1 2 3 4 5) (list 2 3) (list))
  (list 1 4 5))
 )
